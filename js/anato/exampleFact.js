app.factory('exampleFact', function($http, $q) {
    // note: we don't actually need $http or $q. I've just got them
    // here to show you that you can inject other services/factories/etc!
    var codeInf = {
        'html': {
            code: "&lt;body ng-app='myApp'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id='firstBit' ng-controller='contOne'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{anAngularVar}}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id='secondBit' ng-controller='contTwo'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{anotherAngularVar}}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src='http://ajax.googleapis.com/ajax/libs/angularjs/1.5.3/angular.min.js'&gt;&lt;/script&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src='./js/main.js'&gt;&lt;/script&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src='./js/components/myFactory.js'&gt;&lt;/script&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src='./js/components/myService.js'&gt;&lt;/script&gt;<br/>&lt;/body&gt;<br/>",
            expl: "Turning our page into an AngularJS app is pretty simple. We just need to add <code>ng-app</code> and <code>ng-controller</code> to some point on our page. You can have multiple controllers and apps, but generally you have one app per, well, app. Also, <code>ng-controller</code> <i>must</i> go inside <code>ng-app</code>. Finally, the bit inside the {{brackets}} is known as an AngularJS binding. If there's a variable on the $scope object called 'brackets', its value will show up here."
        },
        'app': {
            code: "var app = angular.module('myAwesomeApp',[]);",
            expl: "'app' (also known as a module) basically tells AngularJS we're starting a new app. Note that you don't <i>actually</i> have to call your app 'app', but for starters it can be a good idea. This, generally speaking, must be placed at the <i>top</i> of your file. Some important notes:<ul><li>The name of the app goes in quotes as the first argument to the '.module' function.</li><li>Any other separate apps you wanna inject into your app go inside the array argument (the second argument).</li><li>If you're boring and don't want additional apps, just leave an empty array (as illustrated).</li></ul>"
        },
        'controller': {
            code: "app.controller('bestControllerEver',function($scope){<br/>&nbsp;&nbsp;$scope.myFirstName = 'Dave';<br/>})",
            expl: "The controller basically acts as the central 'brain' of your AngularJS app. It shepherds the other pieces and, more imprtantly, the $scope. A few notes:<ul><li>The argument to the function given as the second argument of '.controller()' <i>must</i> be '$scope'. For this reason, certain uglifiers/minifiers that rename variables can break your AngularJS app!</li><li>You can have multiple controllers per app. For example, it's incredibly common to have one controller for each page. If you're feelin' really fancy, you can even use multiple controllers per page!</li><li>The 'app' part of 'app.controller()', of course, depends on what you actually named your app. However, it <i><b>must</b></i> go after the 'var app' (or whatever you call it) as in the description on 'app'</li><li>While it's not required (read: it wont break your app), the AngularJS community generally likes the idea of <i>not</i> putting your business logic/DOM manipulation in the controller. Instead, that kinda stuff should go in factories/services.</li></ul>"
        },
        '$scope': {
            code: "$scope.myVar = 'something';<br/>$scope.someFunc = function(data){<br/>&nbsp;&nbsp;alert('Hey,'+data+'!');<br/>}",
            expl: "<code>$scope</code> is the main object that AngularJS 'watches'. It essentially acts like any other JavaScript object, in that you can access stuff on it with dot/bracket notation, you can pass it around, etc. When <code>$scope</code> notices a change on something (i.e., one of its properties), it triggers something called a 'Digest Cycle', which, despite its name, is not a new fitness craze. <ol><li>Instead, it first looks to see if changing this particular property has changed any other properties.</li><li>Next, it looks at <i>all</i> of the items on the $scope, and checks to see if they're 'dirty' (i.e., have been changed since last cycle).</li><li>Then it checks to see if <i>those</i> changed properties have changed any other properties, and so on.</li></ol> Note that this can cause some very high time-complexity if you're not careful!"
        },
        'factory': {
            code: "app.factory('myFactory', function() {<br/>&nbsp;&nbsp;var randLotto = Math.floor(Math.random()*999999);<br/>&nbsp;&nbsp;return {<br/>&nbsp;&nbsp;&nbsp;&nbsp;lotto:function(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Your lucky numbers are: '+randLotto;<br/>&nbsp;&nbsp;&nbsp;&nbsp;},<br/>&nbsp;&nbsp;&nbsp;&nbsp;anotherFunc:function{<br/>&nbsp;&nbsp;&nbsp;&nbsp;    return someObj;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;};<br/>});<br/>",
            expl: "Factories and Services are pretty similar. Both factories and services allow you to abstract your data into an external file that AngularJS can include. However, there are some differences. In a factory, you create an object and then return that object (along with any methods and properties).The useful thing about this is that you can run a bit of code before you return your object."
        },
        'service': {
            code: "app.service('myService',function(){<br/>&nbsp;&nbsp;this.sayHi = function(name){<br/>&nbsp;&nbsp;&nbsp;&nbsp;return 'Hello, '+name+'!';<br/>&nbsp;&nbsp;}<br/>})",
            expl: "Factories and Services are pretty similar. Both factories and services allow you to abstract your data into an external file that AngularJS can include. However, there are some differences. In a service, you're basically using a constructor function. In other words, <code>app.service('myService',...)</code> returns an INSTANCE of the 'myService' class. You should recognize this by the inclusion of the word 'this' in all of the methods/properties in the service."
        },
        'ng-repeat': {
            code: "<h5>In JS:</h5>$scope.foodForDinner = ['chicken','potatoes','salad','icecream']<hr><h5>In HTML:</h5>&lt;div id='shoppingList' ng-repeat='someFood in foodForDinner'&gt;{{someFood}}&lt;div&gt;",
            expl: "<code>ng-repeat</code> and <code>ng-if</code> (etc.) are some pretty cool little extras that allow easy DOM manipulation on the front end (clue: they're both directives!). <code>ng-repeat</code> allows you to repeat an element once for each item in an array"
        },
        'ng-if / ng-show / ng-hide': {
            code: "<h5>In JS:</h5>$scope.myBooleanVal = Math.random()>.5?true:false;//just gonna make a random boolean val here!<hr><h5>In HTML:</h5>&lt;div id='showMe' ng-show='myBooleanVal==true'&gt;I'll only appear if myBooleanVal is TRUE!&lt;div&gt;<br/>&lt;div id='hideMe' ng-hide='myBooleanVal==true'&gt;I'll only appear if myBooleanVal is FALSE!&lt;div&gt;<br/>&lt;div id='ifMe' ng-if='myBooleanVal==true'&gt;I'll only exist if myBooleanVal is TRUE!&lt;div&gt;",
            expl: "<code>ng-repeat</code> and <code>ng-if</code> (etc.) are some pretty cool little extras that allow easy DOM manipulation on the front end (clue: they're both directives!). All three of these, basically, determine whether or not an element is rendered on the page. However, there are some notable (and important!) differences:<ul><li><code>ng-show</code>: This will only be visible (i.e., css <code>display</code> is not set to <code>none</code> if the expression passed into ng-show evaluates to truthy. However, if it's <i>not</i> shown, it'll still be on the DOM (i.e., you can do stuff to it 'behind the scenes').</li><li><code>ng-hide</code>: Basically the same as ng-show, but in reverse. If the expression passed to it evaluates to truthy, it'll apply the css property <code>display: none;</code> to it, thus hiding the element.</li><li><code>ng-if</code>: looks the same as ng-show, in that if it's falsey, it makes an element disappear. However, the important thing to remember is that this also removes it from the DOM!. As a result, if you have a falsey ng-if, and you try to access an element in that 'hidden' div, you'll get undefined.</li></ul>"
        },
        'directive':{
            code:"<h5>In JS:</h5>app.directive('favoriteAlbums', function() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;return {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restrict: 'AE',<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template: '&lt;div class='album' ng-repeat='alb in albumList&gt;&lt;div&gt;{{alb.title}}&lt;/div&gt;&lt;div ng-repeat='song in alb.songs'&gt;&lt;/div&gt;&lt;/div&gt;',<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link: function(scope, elem, attrs) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem.bind('mouseenter', function() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    console.log('You mouseovered a '+elem[0].tagName+'element!')<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;};<br/>});<hr/><h5>In HTML:</h5> &lt;favorite-albums&gt;&lt;/favorite-albums&gt;",
            expl:"AngularJS directives allow you to make custom HTML elements, attributes, and classes. Let's imagine you're creating an album list. Instead of having to type out:<br/><code>&lt;div class='album'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class='albTitle'&gt;Rock Songs&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class='albSongs'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div ng-repeat='song in albumList[albTitle].songs'&gt;{{song}}&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>&lt;/div&gt;<br/>&lt;div class='album'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class='albTitle'&gt;Classical Songs&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class='albSongs'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div ng-repeat='song in albumList[albTitle]'&gt;{{song}}&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>&lt;/div&gt;<br/>&lt;div class='album'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class='albTitle'&gt;Songs to Code By&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class='albSongs'&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div ng-repeat='song in albumList[albTitle]'&gt;{{song}}&lt;/div&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br/>&lt;/div&gt;<br/>...etc</code>, you could have a directive generate these albums for you!<h4>Parts:</h4><ul><li>Name: Notice how I call the directive 'favoriteAlbums' in my JS, but then favorite-albums in the html? That's because AngularJS automatically converts camelCase to dash-case.</li><li>return: We're returning an object here.</li><li>restrict: The 'restrict' property tells us what kind of things we want this directive usable on. 'E' means Elements (i.e., tags). 'A' means 'attributes'. 'C' means 'classes'. Finally, there's a fourth option, 'M', which stands for 'comments' (if you want custom, dynamically-generated comments!)</li><li>template/templateUrl: We pick one of these, not both. If we pick 'template', that allows us to write an html template (including AngularJS bindings!) that will be compiled each time we use our directive. templateUrl does basically the same thing, except that in this case we can refer to an external html file where our template is stored: <code>templateUrl: 'albumBits.html',</code></li><li>link: The link attribute lets us assign particular behaviors to the element. The three arguments passed into the link function refer to the scope (i.e., $scope), the element itself, and the attributes. To bind a behavior to our mouse hovering over the element, we might do <code>elem.bind('mouseenter',function(){//stuff i wanna do});</code></li></ul>"
        }
    }
    var randLotto = Math.floor(Math.random()*999999);
    return {
        getCodeBit: function(ci) {
            $('#codeDiv').hide(200).html('').show(200).html(codeInf[ci].code);
            $('#explDiv').hide(200).html('').show(200).html(codeInf[ci].expl);
            return ci;
        },
        lotto:function(){
            return 'Your lucky numbers are: '+randLotto;
        }
    };
});
